import threading
import time
import random
import datetime
from Characterization.Environment import env
from util.DataFrame import globalFrame
from AutomatedApplication.application.homeApplication import *

BedroomOne_device_list = [
    [deviceOn, ["BedroomTwo", "Curtain"]],
    [deviceOff, ["BedroomTwo", "Curtain"]],
    [deviceOn, ["BedroomTwo", "Door"]],
    [deviceOff, ["BedroomTwo", "Door"]],
    [deviceOn, ["BedroomTwo", "AC"]],
    [deviceOff, ["BedroomTwo", "AC"]],
    [deviceOn, ["BedroomTwo", "AirPurifier"]],
    [deviceOff, ["BedroomTwo", "AirPurifier"]],
    [deviceOn, ["BedroomTwo", "Light"]],
    [deviceOff, ["BedroomTwo", "Light"]],
    [deviceOn, ["BedroomTwo", "Humidifier"]],
    [deviceOff, ["BedroomTwo", "Humidifier"]],
    [deviceOn, ["BedroomTwo", "Window"]],
    [deviceOff, ["BedroomTwo", "Window"]]],

BedroomTwo_device_list = [
    [deviceOn, ["BedroomTwo", "Curtain"]],
    [deviceOff, ["BedroomTwo", "Curtain"]],
    [deviceOn, ["BedroomTwo", "Door"]],
    [deviceOff, ["BedroomTwo", "Door"]],
    [deviceOn, ["BedroomTwo", "AC"]],
    [deviceOff, ["BedroomTwo", "AC"]],
    [deviceOn, ["BedroomTwo", "AirPurifier"]],
    [deviceOff, ["BedroomTwo", "AirPurifier"]],
    [deviceOn, ["BedroomTwo", "Light"]],
    [deviceOff, ["BedroomTwo", "Light"]],
    [deviceOn, ["BedroomTwo", "Humidifier"]],
    [deviceOff, ["BedroomTwo", "Humidifier"]],
    [deviceOn, ["BedroomTwo", "Window"]],
    [deviceOff, ["BedroomTwo", "Window"]],
    [deviceOn, ["BedroomTwo", "TV"]],
    [deviceOff, ["BedroomTwo", "TV"]]],

LivingRoom_device_list = [
    [deviceOn, ["LivingRoom", "Curtain"]],
    [deviceOff, ["LivingRoom", "Curtain"]],
    [deviceOn, ["LivingRoom", "Door"]],
    [deviceOff, ["LivingRoom", "Door"]],
    [deviceOn, ["LivingRoom", "AC"]],
    [deviceOff, ["LivingRoom", "AC"]],
    [deviceOn, ["LivingRoom", "AirPurifier"]],
    [deviceOff, ["LivingRoom", "AirPurifier"]],
    [deviceOn, ["LivingRoom", "Light"]],
    [deviceOff, ["LivingRoom", "Light"]],
    [deviceOn, ["LivingRoom", "Humidifier"]],
    [deviceOff, ["LivingRoom", "Humidifier"]],
    [deviceOn, ["LivingRoom", "Window"]],
    [deviceOff, ["LivingRoom", "Window"]],
    [deviceOn, ["LivingRoom", "TV"]],
    [deviceOff, ["LivingRoom", "TV"]]],


def personOne():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 7.5, 0.6 * 60 * 7.7))
    t1 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.6 * 1, 0.6 * 3))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Window", env, 'app',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    t2 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.1, 0.15))
    t9 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.6 * 5, 0.6 * 8))
    t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t10.start()
    pool.append(t10)
    time.sleep(random.uniform(0.03, 0.05))
    time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 3) == 1):
        t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
        t10.start()
        pool.append(t10)
    t11 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 10, 0.6 * 13))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.03, 0.05))
    t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.6 * 0.4, 0.6 * 1.5))
    t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.6 * 60 * 1.4, 0.6 * 60 * 1.5))
    if (random.randint(0, 2) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomTwo",))
        get_up.start()
        get_up.join()
    time.sleep(random.uniform(0.6 * 60 * 1.4, 0.6 * 60 * 1.5))
    # 上班
    if (random.randint(0, 3) == 1):  # 午休回家
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
        if (random.randint(0, 3) == 1):
            time.sleep(random.uniform(0.1, 0.2))
            cook = threading.Thread(target=Cook)
            cook.start()
            cook.join()
            time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
            stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
            t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.6 * 75, 0.6 * 80))
            t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
            stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.1, 0.15))
        else:
            time.sleep(random.uniform(0.6 * 105, 0.6 * 120))
        # 14.00
        t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.5))
        t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 4.2, 0.6 * 4.5))
    else:
        time.sleep(random.uniform(0.6 * 60 * 6, 0.6 * 6.2))
    # 18.00-18.30
    t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Window", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.1, 0.2))
    start_time = random.uniform(40 * 0.6, 90 * 0.6)
    random_event = threading.Thread(target=Reservation, args=(start_time,))
    random_event.start()
    pool.append(random_event)
    if random.randint(0, 50) < 45:
        time.sleep(start_time - 5 * 0.6)
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
        time.sleep(random.uniform(0.03, 0.05))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    if (random.randint(0, 3) == 1):
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        wash_clothes = threading.Thread(target=washClothes)
        wash_clothes.start()
        wash_clothes.join()
        time.sleep(random.uniform(0.6 * 20, 0.6 * 50))
        collect_clothes = threading.Thread(target=collectClothes)
        collect_clothes.start()
        collect_clothes.join()
    else:
        time.sleep(random.uniform(0.6 * 30, 0.6 * 60))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 50, 0.6 * 60))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 40, 0.6 * 50))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    if random.randint(0, 2) == 1:
        time.sleep(random.uniform(0.1, 0.2))
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
        t12.start()
        pool.append(t12)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
    if random.randint(0, 2) == 1:
        t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Window", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.1, 0.2))
    t1 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)

    for item in pool:
        item.join()


def personTwo():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 8, 0.6 * 60 * 8.2))
    if (random.randint(0, 4) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomTwo",))
        get_up.start()
        get_up.join()
    time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
        stateDecrease(globalFrame.thread_list, "BedroomTwo", "Humidity", env)
    time.sleep(random.uniform(0.1, 0.2))
    t1 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    t2 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    if random.randint(0, 5) == 1:
        t11 = threading.Thread(target=deviceOn, args=("LivingRoom", "AC", env, 'offline',))
        t11.start()
        pool.append(t11)
        time.sleep(random.uniform(0.1, 0.2))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.1, 0.15))
    t9 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.6 * 5, 0.6 * 8))
    t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t10.start()
    pool.append(t10)
    time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 3) == 1):
        t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
        t10.start()
        pool.append(t10)
    t11 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 13))
    t11 = threading.Thread(target=deviceOff, args=("LivingRoom", "AC", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.1, 0.2))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.03, 0.05))
    t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.3, 0.6 * 1.5))
    t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.6 * 60 * 3, 0.6 * 60 * 3.2))
    time.sleep(random.uniform(0.03, 0.05))
    # 上班
    if (random.randint(0, 3) == 1):  # 午休回家
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
        if (random.randint(0, 2) == 1):
            t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Window", env, 'offline',))
            t12.start()
            pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
        if (random.randint(0, 3) == 1):
            time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
            t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
            stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.6 * 5, 0.6 * 10))
            if random.randint(0, 3) == 1:
                t11 = threading.Thread(target=deviceOn, args=("BedroomTwo", "AC", env, 'offline',))
                t11.start()
                pool.append(t11)
                time.sleep(random.uniform(0.1, 0.2))
            random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
            t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
                BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
                'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.6 * 70, 0.6 * 71))
            t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            t1 = threading.Thread(target=deviceOff, args=("LivingRoom", "Humidifier", env, 'offline',))
            t1.start()
            pool.append(t1)
            time.sleep(random.uniform(0.1, 0.2))
            stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.1, 0.15))
        else:
            time.sleep(random.uniform(0.6 * 90, 0.6 * 95))
        # 14.00
        t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.2))
        t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 4, 0.6 * 4.5))
    else:
        time.sleep(random.uniform(0.6 * 60 * 6, 0.6 * 6.2))
    # 18.00-18.30
    t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 45))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 35, 0.6 * 55))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 65, 0.6 * 75))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 25, 0.6 * 35))
    t11 = threading.Thread(target=deviceOff, args=("BedroomTwo", "AC", env, 'offline',))
    t11.start()
    pool.append(t11)
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    if random.randint(0, 3) == 1:
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    if random.randint(0, 2) == 1:
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    if random.randint(0, 2) == 1:
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    if random.randint(0, 2) == 1:
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 60, 0.6 * 65))

    for item in pool:
        item.join()


def personThree():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 8, 0.6 * 60 * 8.2))
    t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Window", env, 'app',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.05, 0.1))
    if (random.randint(0, 5) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomOne",))
        get_up.start()
        get_up.join()
    t1 = threading.Thread(target=deviceOn, args=("BedroomOne", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    t2 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    t9 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.6 * 5, 0.6 * 8))
    t10 = threading.Thread(target=deviceOff, args=("BedroomOne", "Light", env, 'offline',))
    t10.start()
    pool.append(t10)
    time.sleep(random.uniform(0.03, 0.05))
    t11 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 13))
    if (random.randint(0, 3) == 1):
        t10 = threading.Thread(target=deviceOff, args=("BedroomOne", "Curtain", env, 'offline',))
        t10.start()
        pool.append(t10)
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.03, 0.05))
    t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t1.start()
    pool.append(t1)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.3, 0.6 * 1.5))
    t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.6 * 60 * 1.5, 0.6 * 60 * 1.6))
    if (random.randint(0, 2) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomOne",))
        get_up.start()
        get_up.join()
    time.sleep(random.uniform(0.6 * 60 * 1.5, 0.6 * 60 * 1.6))
    # 上班
    if (random.randint(0, 3) == 1):  # 午休回家
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
        if (random.randint(0, 3) == 1):
            time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
            t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.6 * 5, 0.6 * 10))
            random_device = random.randint(0, len(BedroomOne_device_list) - 1)
            t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
                BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
                'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.6 * 70, 0.6 * 71))
            t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.03, 0.05))
            stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
            stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
            time.sleep(random.uniform(0.03, 0.05))
            t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
            t.start()
            pool.append(t)
            time.sleep(random.uniform(0.1, 0.15))
        else:
            time.sleep(random.uniform(0.6 * 90, 0.6 * 95))
        # 14.00
        t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.5))
        t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 4, 0.6 * 4.5))
    else:
        time.sleep(random.uniform(0.6 * 60 * 6, 0.6 * 6.2))
    # 18.00-18.30
    t = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        stateDecrease(globalFrame.thread_list, "BedroomTwo", "Humidity", env)
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 45))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 50, 0.6 * 55))
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("LivingRoom", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "Humidity", env)
    t12 = threading.Thread(target=deviceOff, args=("LivingRoom", "Window", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 25, 0.6 * 35))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 60, 0.6 * 70))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Curtain", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    t1 = threading.Thread(target=deviceOff, args=("BedroomOne", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)

    for item in pool:
        item.join()


def weekendpersonOne():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 8.5, 0.6 * 60 * 9))
    get_up = threading.Thread(target=getUp, args=("BedroomTwo",))
    get_up.start()
    get_up.join()
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 1, 0.6 * 2))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 25, 0.6 * 35))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.06, 0.1))
    t2 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    if (random.randint(0, 4) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
        stateDecrease(globalFrame.thread_list, "BedroomTwo", "Humidity", env)
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    t9 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t10.start()
    pool.append(t10)
    time.sleep(random.uniform(0.03, 0.05))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 10, 0.6 * 15))
    t11 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("LivingRoom", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    # 出门3小时
    if (random.randint(0, 3) == 1):
        change_clothes = threading.Thread(target=changeClothes)
        change_clothes.start()
        change_clothes.join()
        time.sleep(random.uniform(0.03, 0.05))
        t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t1.start()
        pool.append(t1)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.5))
        t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t2.start()
        pool.append(t2)
        time.sleep(random.uniform(0.6 * 60 * 2.8, 0.6 * 60 * 3))
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
    else:
        random_device = random.randint(0, len(LivingRoom_device_list) - 1)
        t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
            LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
            'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 1, 0.6 * 1.5))
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
        time.sleep(random.uniform(0.6 * 60 * 2, 0.6 * 1.7))
    # 15.30
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    # 18.00
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.6 * 50, 0.6 * 60))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.3, 0.6 * 1.5))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 25))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Window", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.03, 0.05))
    time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 3) == 1):
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        wash_clothes = threading.Thread(target=washClothes)
        wash_clothes.start()
        wash_clothes.join()
        time.sleep(random.uniform(0.6 * 20, 0.6 * 50))
        collect_clothes = threading.Thread(target=collectClothes)
        collect_clothes.start()
        collect_clothes.join()
    else:
        time.sleep(random.uniform(0.6 * 50, 0.6 * 70))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.1, 0.3))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.3, 0.6 * 1.5))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 50, 0.6 * 60))
    t1 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.03, 0.05))
    for item in pool:
        item.join()


def weekendpersonTwo():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 9, 0.6 * 60 * 9.5))
    get_up = threading.Thread(target=getUp, args=("BedroomTwo",))
    get_up.start()
    get_up.join()
    time.sleep(random.uniform(0.06, 0.1))
    t12 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Window", env, 'app',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.06, 0.1))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 1, 0.6 * 2))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 25, 0.6 * 35))
    t2 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.1, 0.15))
    t9 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    t10 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t10.start()
    pool.append(t10)
    time.sleep(random.uniform(0.03, 0.05))
    t11 = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 30, 0.6 * 35))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    # 出门3小时
    if (random.randint(0, 3) == 1):
        change_clothes = threading.Thread(target=changeClothes)
        change_clothes.start()
        change_clothes.join()
        time.sleep(random.uniform(0.03, 0.05))
        t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t1.start()
        pool.append(t1)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.5))
        t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t2.start()
        pool.append(t2)
        time.sleep(random.uniform(0.6 * 60 * 2.8, 0.6 * 60 * 3))
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
    else:
        random_device = random.randint(0, len(LivingRoom_device_list) - 1)
        t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
            LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
            'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 1, 0.6 * 1.5))
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
        time.sleep(random.uniform(0.6 * 60 * 2, 0.6 * 1.7))
    # 15.30
    time.sleep(random.uniform(0.1, 0.2))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    # 18.00
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.3, 0.6 * 1.5))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 25))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    if (random.randint(0, 3) == 1):
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        wash_clothes = threading.Thread(target=washClothes)
        wash_clothes.start()
        wash_clothes.join()
        time.sleep(random.uniform(0.6 * 20, 0.6 * 50))
        collect_clothes = threading.Thread(target=collectClothes)
        collect_clothes.start()
        collect_clothes.join()
    else:
        time.sleep(random.uniform(0.6 * 50, 0.6 * 70))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 40, 0.6 * 50))
    random_device = random.randint(0, len(BedroomTwo_device_list) - 1)
    t = threading.Thread(target=BedroomTwo_device_list[0][random_device][0], args=(
        BedroomTwo_device_list[0][random_device][1][0], BedroomTwo_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.03, 0.05))
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "Humidity", env)
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOn, args=("LivingRoom", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    t = threading.Thread(target=deviceOn, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomTwo", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomTwo", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 5, 0.6 * 8))
    if (random.randint(0, 3) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Curtain", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    time.sleep(random.uniform(0.6 * 50, 0.6 * 60))
    t1 = threading.Thread(target=deviceOff, args=("BedroomTwo", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)

    for item in pool:
        item.join()


def weekendpersonThree():
    pool = []
    time.sleep(random.uniform(0.6 * 60 * 9.5, 0.6 * 60 * 10))
    if (random.randint(0, 4) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomOne",))
        get_up.start()
        get_up.join()
        time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Window", env, 'app',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.03, 0.05))
    t2 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t2.start()
    pool.append(t2)
    time.sleep(random.uniform(0.05, 0.1))
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    if (random.randint(0, 2) == 1):
        get_up = threading.Thread(target=getUp, args=("BedroomOne",))
        get_up.start()
        get_up.join()
    time.sleep(random.uniform(0.1, 0.2))
    t9 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t9.start()
    pool.append(t9)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 28))
    t11 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t11.start()
    pool.append(t11)
    time.sleep(random.uniform(0.05, 0.1))
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t12.start()
    pool.append(t12)
    time.sleep(random.uniform(0.6 * 40, 0.6 * 43))
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 70, 0.6 * 75))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    if (random.randint(0, 5) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.6 * 10, 0.6 * 11))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "Humidity", env)
        t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 4) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 3) == 1):
        t11 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
        t11.start()
        pool.append(t11)
        time.sleep(random.uniform(0.05, 0.1))
        stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.03, 0.05))
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.6 * 5, 0.6 * 8))
        change_clothes = threading.Thread(target=changeClothes)
        change_clothes.start()
        change_clothes.join()
        time.sleep(random.uniform(0.03, 0.05))
        t1 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t1.start()
        pool.append(t1)
        time.sleep(random.uniform(0.03, 0.05))
        stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        time.sleep(random.uniform(0.3, 0.6 * 1.5))
        t2 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t2.start()
        pool.append(t2)
        time.sleep(random.uniform(0.6 * 60 * 2.8, 0.6 * 60 * 3))
        t3 = threading.Thread(target=deviceOn, args=("LivingRoom", "Door", env, 'offline',))
        t3.start()
        pool.append(t3)
        time.sleep(random.uniform(0.03, 0.05))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        t4 = threading.Thread(target=deviceOff, args=("LivingRoom", "Door", env, 'offline',))
        t4.start()
        pool.append(t4)
    else:
        random_device = random.randint(0, len(BedroomOne_device_list) - 1)
        t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
            BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
            'offline',))
        t.start()
        pool.append(t)
        time.sleep(random.uniform(0.6 * 60 * 1, 0.6 * 1.5))
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
        time.sleep(random.uniform(0.6 * 60 * 2, 0.6 * 1.7))
        t11 = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
        t11.start()
        pool.append(t11)
        time.sleep(random.uniform(0.05, 0.1))
        stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
        stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
        time.sleep(random.uniform(0.03, 0.05))
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
        t12.start()
        pool.append(t12)
    # 15.30
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 3) == 1):
        cook = threading.Thread(target=Cook)
        cook.start()
        cook.join()
        time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
        stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    else:
        time.sleep(random.uniform(0.6 * 35, 0.6 * 36))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOn, args=("BedroomOne", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    time.sleep(random.uniform(0.6 * 45, 0.6 * 46))
    cook = threading.Thread(target=Cook)
    cook.start()
    cook.join()
    # 18.00
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    stateIncrease(globalFrame.thread_list,"Kitchen", "AirQuality", env)
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 15, 0.6 * 20))
    random_device = random.randint(0, len(LivingRoom_device_list) - 1)
    t = threading.Thread(target=LivingRoom_device_list[0][random_device][0], args=(
        LivingRoom_device_list[0][random_device][1][0], LivingRoom_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    change_clothes = threading.Thread(target=changeClothes)
    change_clothes.start()
    change_clothes.join()
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        start_time = random.uniform(40 * 0.6, 90 * 0.6)
        random_event = threading.Thread(target=Reservation, args=(start_time,))
        random_event.start()
        pool.append(random_event)
        if random.randint(0, 50) < 40:
            time.sleep(start_time - 5 * 0.6)
            washing = threading.Thread(target=Washing)
            washing.start()
            washing.join()
            time.sleep(random.uniform(0.03, 0.05))
        else:
            time.sleep(random.uniform(0.6 * 25, 0.6 * 30))
    else:
        washing = threading.Thread(target=Washing)
        washing.start()
        washing.join()
    time.sleep(random.uniform(0.6 * 20, 0.6 * 30))
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 20, 0.6 * 25))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 50, 0.6 * 70))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    washing = threading.Thread(target=Washing)
    washing.start()
    washing.join()
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOn, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.03, 0.05))
    stateDecrease(globalFrame.thread_list, "LivingRoom", "HumanState", env)
    stateIncrease(globalFrame.thread_list, "BedroomOne", "HumanState", env)
    time.sleep(random.uniform(0.03, 0.05))
    t = threading.Thread(target=deviceOff, args=("BedroomOne", "Door", env, 'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.6 * 40, 0.6 * 50))
    random_device = random.randint(0, len(BedroomOne_device_list) - 1)
    t = threading.Thread(target=BedroomOne_device_list[0][random_device][0], args=(
        BedroomOne_device_list[0][random_device][1][0], BedroomOne_device_list[0][random_device][1][1], env,
        'offline',))
    t.start()
    pool.append(t)
    time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Humidifier", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Window", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Heater", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    if (random.randint(0, 2) == 1):
        t12 = threading.Thread(target=deviceOff, args=("BedroomOne", "Curtain", env, 'offline',))
        t12.start()
        pool.append(t12)
        time.sleep(random.uniform(0.1, 0.2))
    time.sleep(random.uniform(0.6 * 50, 0.6 * 60))
    t1 = threading.Thread(target=deviceOff, args=("BedroomOne", "Light", env, 'offline',))
    t1.start()
    pool.append(t1)

    for item in pool:
        item.join()
